<?xml version="1.0" encoding="UTF-8"?>
<project name="oopool" default="dist" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <import file="build.common.xml"/>
    <property file="build.properties"/>

    <property name="project.name" value="oopool"/>
    <property name="project.version" value="dev"/>

    <property name="tar.cmd" value="tar"/>
    <property name="cp.cmd" value="cp"/>

    <property name="ivy.settings.dir" value="settings"/>
    <property name="ivy.settings.file" value="ivysettings.xml"/>
    <property name="ivy.version" value="2.3.0"/>
    <property name="ivy.source.domainname" value="ivy.laureninnovations.com"/>
    
    <property name="compile.debug" value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize" value="false"/>
    <property name="compile.target" value="6"/>
    <property name="compile.source" value="6"/>
    
    <property name="base.dir" value="."/>
    <property name="build.dir" value="build"/>
    <property name="build.main.dir" value="${build.dir}/main"/>
    <property name="build.main.cobertura.dir" value="${build.main.dir}/cobertura"/>
   
    <property name="stage.dir" value="stage"/>
    
    <property name="src.dir" value="src"/>
    <property name="src.main.dir" value="${src.dir}/main"/>
    <property name="src.main.resources.dir" value="${src.main.dir}/resources"/>
    
    <property name="dist.dir" value="dist"/>

    <property name="deploy.dir" location="deploy"/><!-- MUST BE ABSOLUTE -->

    <property name="libreoffice.target" value="linux-x64"/><!-- linux-x86, win-x64, win-x86, osx-x64 none of these are supported right now. -->
    <property name="libreoffice.tar.dir" value="libreoffice3.6"/><!-- This is the directory within the .tar.bz2 file which should be stripped from the files. -->

    <!-- Default values for the pool, they can be overridden. -->
    <property name="libreoffice.deploy.dir" value="${deploy.dir}/libreoffice"/><!-- MUST BE ABSOLUTE -->
    <property name="libreoffice.instances.dir" value="${deploy.dir}/instances"/><!-- MUST BE ABSOLUTE -->
    <property name="oopool.max_pool_size" value="5"/>
    <property name="oopool.admin_port" value="8099"/>
    <property name="oopool.pool_port" value="8100"/>
    <property name="oopool.first_worker_port" value="8101"/>
    <property name="oopool.instance.max_idle_time" value="60"/><!-- 60 seconds -->
    <property name="oopool.instance.max_jobs" value="100"/><!-- The maximum number of jobs to start with an oo instance before restarting it. (work around for memory leaks in open office.) -->

    <property name="docs.dir" value="${dist.dir}/docs"/>
    <property name="docs.api.dir" value="${dist.dir}/docs/api"/>
    
    <!-- The directory where 3rd party libraries are stored. -->
    <property name="lib.dir" value="lib"/>
    <property name="lib.main.dir" value="${lib.dir}/main"/>

    <!-- The directory where test-time libraries are stored. -->
    <property name="lib.main.testtime.dir" value="${lib.main.dir}/testtime"/>

    <!-- The directory where build-time libraries are stored. -->
    <property name="lib.main.buildtime.dir" value="${lib.main.dir}/buildtime"/>

    <!-- The directory where build-time libraries are stored. -->
    <property name="lib.main.runtime.dir" value="${lib.main.dir}/runtime"/>

    <path id="lib.main.buildtime.classpath">
        <fileset dir="${lib.main.buildtime.dir}" includes="*.jar"/>
    </path>
    <path id="lib.main.runtime.classpath">
        <fileset dir="${lib.main.runtime.dir}" includes="*.jar"/>
    </path>
    <path id="lib.main.testtime.classpath">
        <fileset dir="${lib.main.testtime.dir}" includes="*.jar"/>
    </path>

    <filterset id="substitution.filterset">
        <filter token="LIBREOFFICE_BASE_DIR" value="${libreoffice.deploy.dir}"/>
        <filter token="LIBREOFFICE_INSTANCE_DIR" value="${libreoffice.instances.dir}"/>
        <filter token="OOPOOL_MAX_POOL_SIZE" value="${oopool.max_pool_size}"/>
        <filter token="OOPOOL_FIRST_WORKER_PORT" value="${oopool.first_worker_port}"/>
        <filter token="OOPOOL_ADMIN_PORT" value="${oopool.admin_port}"/>
        <filter token="OOPOOL_POOL_PORT" value="${oopool.pool_port}"/>
        <filter token="OOPOOL_INSTANCE_MAX_IDLE_TIME" value="${oopool.instance.max_idle_time}"/>
        <filter token="OOPOOL_INSTANCE_MAX_JOBS" value="${oopool.instance.max_jobs}"/>
    </filterset>

    <!-- =========================================================================================================== -->
    <!--  MAINTENANCE TARGETS                                                                                        -->
    <!-- =========================================================================================================== -->

    <!-- =========================================================================================================== -->
    <target name="clean" unless="clean.no">
        <parallel>
            <delete dir="${build.dir}" failonerror="false" includeemptydirs="true"/>
            <delete dir="${stage.dir}" failonerror="false" includeemptydirs="true"/>
            <delete dir="${dist.dir}" failonerror="false" includeemptydirs="true"/>
            <delete failonerror="false" includeemptydirs="true">
                <fileset dir="${lib.dir}">
                    <exclude name="ivy/ivy-${ivy.version}.jar"/>
                </fileset>
            </delete>
        </parallel>
    </target>

    <target name="clean-libreoffice" unless="clean.no">
        <delete dir="${deploy.dir}" failonerror="false" includeemptydirs="true"/>
    </target>

    <!-- =========================================================================================================== -->
    <!--  TESTING TARGETS                                                                                            -->
    <!-- =========================================================================================================== -->
    <!-- =========================================================================================================== -->
    <target name="test-all" depends="test-main"/>

    <!-- =========================================================================================================== -->
    <target name="test-main" depends="test-main-findbugs, test-main-unittests"/>

    <!-- =========================================================================================================== -->
    <target name="test-main-findbugs" depends="compile, install-findbugs">
        <property name="findbugs.report.output" value="html"/>
        <generic-run-findbugs component.name="main" report.output="${findbugs.report.output}">
            <component-classpath>
                <path refid="lib.main.testtime.classpath"/>
                <path refid="lib.main.runtime.classpath"/>
            </component-classpath>
        </generic-run-findbugs>
    </target>

    <!-- =========================================================================================================== -->
    <target name="test-main-unittests" depends="compile-main">
        <generic-run-unittests component.name="main">
            <component-classpath>
                <path refid="lib.main.runtime.classpath"/>
            </component-classpath>
        </generic-run-unittests>
    </target>

    <!-- =========================================================================================================== -->
    <!--  COMPILATION TARGETS                                                                                        -->
    <!-- =========================================================================================================== -->
    
    <!-- =========================================================================================================== -->
    <target name="compile" depends="compile-main"/>
    
    <!-- =========================================================================================================== -->
    <target name="compile-main" depends="resolve-all, install-cobertura" unless="compiled.main">
        <generic-compile component.name="main">
            <component-classpath>
                <path refid="lib.main.buildtime.classpath"/>
                <path refid="lib.main.runtime.classpath"/>
            </component-classpath>
        </generic-compile>
    </target>

    <!-- =========================================================================================================== -->
    <!--  JAVADOC GENERATION                                                                                         -->
    <!-- =========================================================================================================== -->
    <!-- =========================================================================================================== -->
    <target name="javadocs" depends="javadocs-main"/>

    <!-- =========================================================================================================== -->
    <target name="javadocs-main">
        <generic-javadoc component.name="main" packagenames="com.laureninnovations.*">
            <component-classpath>
                <path refid="lib.main.buildtime.classpath"/>
                <path refid="lib.main.runtime.classpath"/>
            </component-classpath>
        </generic-javadoc>
    </target>
    
    <!-- =========================================================================================================== -->
    <!--  STAGING TARGETS                                                                                          -->
    <!-- =========================================================================================================== -->    
    <!-- =========================================================================================================== -->
    <target name="stage" depends="stage-main"/>
    
    <!-- =========================================================================================================== -->
    <target name="stage-main" depends="compile-main">
        <mkdir dir="${stage.dir}"/>
        <mkdir dir="${stage.dir}/main"/>
        <mkdir dir="${stage.dir}/conf"/>
        <copy todir="${stage.dir}/main">
            <fileset dir="${build.main.dir}">
                <include name="**/*"/>
                <exclude name="**/*.properties"/>
                <exclude name="**/*.xml"/>
            </fileset>
        </copy>
        <copy todir="${stage.dir}/main">
            <fileset dir="${build.main.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
            <filterset refid="substitution.filterset"/>
        </copy>
        <copy todir="${stage.dir}/conf">
            <fileset dir="${base.dir}/conf">
                <include name="**/*"/>
            </fileset>
            <filterset refid="substitution.filterset"/>
        </copy>
    </target>

    <!-- =========================================================================================================== -->
    <!--  PACKAGING TARGETS                                                                                          -->
    <!-- =========================================================================================================== -->
    <!-- =========================================================================================================== -->
    <target name="dist" depends="dist-main, javadocs"/>

    <!-- =========================================================================================================== -->
    <target name="clean-dist-main" if="clean-dist.do">
        <!-- clean out our old stuff -->
        <delete failonerror="false">
            <fileset dir="${dist.dir}">
                <include name="**/*"/>
                <exclude name="logs"/>
                <exclude name="tmp"/>
            </fileset>
        </delete>
    </target>

    <!-- =========================================================================================================== -->
    <target name="dist-main" depends="clean-dist-main, stage-main, javadocs-main, install-onejar">
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}/bin"/>
        <mkdir dir="${dist.dir}/lib"/>
        <mkdir dir="${dist.dir}/logs"/>
        <mkdir dir="${dist.dir}/tmp"/>

        <one-jar destfile="${dist.dir}/lib/${project.name}-${project.version}.jar">
            <manifest>
                <attribute name="One-Jar-Main-Class" value="com.laureninnovations.oopool.Main"/>
                <attribute name="Class-Path" value="${libreoffice.deploy.dir}/uri-link/lib"/>
            </manifest>
            <main>
                <fileset dir="${stage.dir}/main"/>
            </main>
            <lib>
                <fileset dir="${lib.main.runtime.dir}" includes="*.jar"/>
            </lib>
        </one-jar>
        <copy todir="${dist.dir}">
            <fileset dir="${stage.dir}">
                <include name="conf/**/*"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/bin">
            <fileset dir="${base.dir}/scripts">
                <include name="**/*"/>
            </fileset>
        </copy>
        <chmod perm="ug+x">
            <fileset dir="${dist.dir}/bin">
                <include name="convert.php"/>
                <include name="shutdown.php"/>
                <include name="pool-status.php"/>
                <include name="startup.sh"/>
                <include name="test.sh"/>
            </fileset>
        </chmod>
    </target>

    <!-- =========================================================================================================== -->
    <target name="run" depends="dist">
        <java fork="true" dir="${dist.dir}" jar="${dist.dir}/${project.name}-${project.version}.jar">
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"/>
        </java>
    </target>

    <!-- =========================================================================================================== -->
    <!--  INSTALL CLUSTERED LIBRE OFFICE                                                                             -->
    <!-- =========================================================================================================== -->
    <!-- =========================================================================================================== -->
    <target name="deploy-libreoffice" depends="resolve-all,unpack-libreoffice">
        <mkdir dir="${libreoffice.instances.dir}"/>
    </target>

    <!-- =========================================================================================================== -->
    <target name="unpack-libreoffice" depends="resolve-libreoffice">
        <mkdir dir="${build.dir}/libreoffice"/>
        <bunzip2 dest="${build.dir}/libreoffice/libreoffice.tar">
            <fileset dir="${lib.dir}/libreoffice/${libreoffice.target}">
                <include name="*.bz2"/>
            </fileset>
        </bunzip2>
        <!-- We use the native commands to preserve file permissions in particular executability and sym-links. -->
        <exec executable="${tar.cmd}" dir="${build.dir}/libreoffice">
            <arg value="xvf"/>
            <arg value="libreoffice.tar"/>
        </exec>
        <delete file="${build.dir}/libreoffice/libreoffice.tar"/>
        <mkdir dir="${libreoffice.deploy.dir}"/>
        <exec executable="${cp.cmd}" dir="${build.dir}/libreoffice/${libreoffice.tar.dir}/">
            <arg value="-r"/>
            <arg value="./"/>
            <arg value="${libreoffice.deploy.dir}"/>
        </exec>
    </target>

    <!-- =========================================================================================================== -->
    <!--  DEPENDENCY RESOLUTION TARGETS                                                                              -->
    <!-- =========================================================================================================== -->

    <!-- =========================================================================================================== -->
    <target name="resolve-all" depends="resolve-main-runtime,resolve-main-buildtime,resolve-main-testtime,resolve-main-deploytime"/>

    <!-- =========================================================================================================== -->
    <target name="resolve-main-runtime" depends="ivy-settings" unless="main-runtime.resolved">
        <generic-resolve component.name="main" component.conf="runtime"/>
    </target>

    <!-- =========================================================================================================== -->
    <target name="resolve-main-buildtime" depends="ivy-settings" unless="main-buildtime.resolved">
        <generic-resolve component.name="main" component.conf="buildtime"/>
    </target>

    <!-- =========================================================================================================== -->
    <target name="resolve-main-testtime" depends="ivy-settings" unless="main-testtime.resolved">
        <generic-resolve component.name="main" component.conf="testtime"/>
    </target>

    <!-- =========================================================================================================== -->
    <target name="resolve-main-deploytime" depends="ivy-settings" unless="main-deploytime.resolved">
        <generic-resolve component.name="main" component.conf="deploytime"/>
    </target>

    <!-- =========================================================================================================== -->
    <target name="resolve-libreoffice" depends="ivy-settings" unless="libreoffice.resolved">
        <generic-resolve component.name="libreoffice" component.conf="${libreoffice.target}"/>
    </target>

    <!-- =========================================================================================================== -->
    <target name="ivy-settings" depends="install-ivy" unless="resolve.no">
        <fail unless="ivy.settings.dir"/>
        <ivy:settings file="${ivy.settings.dir}/${ivy.settings.file}"/>
    </target>

</project>
